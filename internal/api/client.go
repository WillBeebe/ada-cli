// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	HTTPBearerScopes = "HTTPBearer.Scopes"
)

// AddProjectFile defines model for AddProjectFile.
type AddProjectFile struct {
	Content string `json:"content"`
	Name    string `json:"name"`
	Path    string `json:"path"`
}

// CreateProject defines model for CreateProject.
type CreateProject struct {
	Name          string `json:"name"`
	Path          string `json:"path"`
	Provider      string `json:"provider"`
	ProviderModel string `json:"provider_model"`
}

// EditBody defines model for EditBody.
type EditBody struct {
	Content string `json:"content"`
	Context string `json:"context"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// PostQuery defines model for PostQuery.
type PostQuery struct {
	ProjectId string `json:"projectId"`
	Prompt    string `json:"prompt"`
}

// UpdateProject defines model for UpdateProject.
type UpdateProject struct {
	Name          string `json:"name"`
	Path          string `json:"path"`
	Provider      string `json:"provider"`
	ProviderModel string `json:"provider_model"`
}

// UpdateProjectFile defines model for UpdateProjectFile.
type UpdateProjectFile struct {
	AddedToContext bool `json:"added_to_context"`
}

// UpdateSettings defines model for UpdateSettings.
type UpdateSettings struct {
	AnthropicApiKey      string `json:"anthropic_api_key"`
	CohereApiKey         string `json:"cohere_api_key"`
	GhPatToken           string `json:"gh_pat_token"`
	GoogleAiStudioApiKey string `json:"google_ai_studio_api_key"`
	GroqApiKey           string `json:"groq_api_key"`
	OpenAiApiKey         string `json:"open_ai_api_key"`
	PerplexityAiApiKey   string `json:"perplexity_ai_api_key"`
	VoyageAiApiKey       string `json:"voyage_ai_api_key"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateProjectsPostJSONRequestBody defines body for CreateProjectsPost for application/json ContentType.
type CreateProjectsPostJSONRequestBody = CreateProject

// UpdateProjectsProjectIdPutJSONRequestBody defines body for UpdateProjectsProjectIdPut for application/json ContentType.
type UpdateProjectsProjectIdPutJSONRequestBody = UpdateProject

// RunEditCommandProjectsProjectIdCodePostJSONRequestBody defines body for RunEditCommandProjectsProjectIdCodePost for application/json ContentType.
type RunEditCommandProjectsProjectIdCodePostJSONRequestBody = EditBody

// CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody defines body for CreateProjectFileProjectsProjectIdFilesPost for application/json ContentType.
type CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody = AddProjectFile

// UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody defines body for UpdateProjectFileProjectsProjectIdFilesFileIdPut for application/json ContentType.
type UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody = UpdateProjectFile

// PromptPromptPostJSONRequestBody defines body for PromptPromptPost for application/json ContentType.
type PromptPromptPostJSONRequestBody = PostQuery

// UpdateSettingsPutJSONRequestBody defines body for UpdateSettingsPut for application/json ContentType.
type UpdateSettingsPutJSONRequestBody = UpdateSettings

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ReadRootGet request
	ReadRootGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAgentsGet request
	ListAgentsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentsIdGet request
	GetAgentsIdGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobsGet request
	ListJobsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadJobsJobIdGet request
	ReadJobsJobIdGet(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadProjectsJobsJobIdProjectsGet request
	ReadProjectsJobsJobIdProjectsGet(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListProjectsGet request
	ListProjectsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectsPostWithBody request with any body
	CreateProjectsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectsPost(ctx context.Context, body CreateProjectsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectsProjectIdDelete request
	DeleteProjectsProjectIdDelete(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadProjectsProjectIdGet request
	ReadProjectsProjectIdGet(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectsProjectIdPutWithBody request with any body
	UpdateProjectsProjectIdPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectsProjectIdPut(ctx context.Context, projectId string, body UpdateProjectsProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunEditCommandProjectsProjectIdCodePostWithBody request with any body
	RunEditCommandProjectsProjectIdCodePostWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RunEditCommandProjectsProjectIdCodePost(ctx context.Context, projectId string, body RunEditCommandProjectsProjectIdCodePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectFileProjectsProjectIdFilesPostWithBody request with any body
	CreateProjectFileProjectsProjectIdFilesPostWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProjectFileProjectsProjectIdFilesPost(ctx context.Context, projectId string, body CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBody request with any body
	UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBody(ctx context.Context, projectId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProjectFileProjectsProjectIdFilesFileIdPut(ctx context.Context, projectId string, fileId string, body UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadHistoryProjectsProjectIdHistoryGet request
	ReadHistoryProjectsProjectIdHistoryGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptPromptPostWithBody request with any body
	PromptPromptPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PromptPromptPost(ctx context.Context, body PromptPromptPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProtectedRouteProtectedRouteGet request
	ProtectedRouteProtectedRouteGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSettingsGet request
	ListSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSettingsPutWithBody request with any body
	UpdateSettingsPutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSettingsPut(ctx context.Context, body UpdateSettingsPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTasksGet request
	ListTasksGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReadProjectTasksEpTasksProjectIdGet request
	ReadProjectTasksEpTasksProjectIdGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageTotalGet request
	ListUsageTotalGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ReadRootGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadRootGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAgentsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAgentsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentsIdGet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsIdGetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadJobsJobIdGet(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadJobsJobIdGetRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadProjectsJobsJobIdProjectsGet(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadProjectsJobsJobIdProjectsGetRequest(c.Server, jobId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListProjectsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListProjectsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectsPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectsPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectsPost(ctx context.Context, body CreateProjectsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectsPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectsProjectIdDelete(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectsProjectIdDeleteRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadProjectsProjectIdGet(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadProjectsProjectIdGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectsProjectIdPutWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectsProjectIdPutRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectsProjectIdPut(ctx context.Context, projectId string, body UpdateProjectsProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectsProjectIdPutRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunEditCommandProjectsProjectIdCodePostWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunEditCommandProjectsProjectIdCodePostRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunEditCommandProjectsProjectIdCodePost(ctx context.Context, projectId string, body RunEditCommandProjectsProjectIdCodePostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunEditCommandProjectsProjectIdCodePostRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectFileProjectsProjectIdFilesPostWithBody(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectFileProjectsProjectIdFilesPostRequestWithBody(c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectFileProjectsProjectIdFilesPost(ctx context.Context, projectId string, body CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectFileProjectsProjectIdFilesPostRequest(c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBody(ctx context.Context, projectId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequestWithBody(c.Server, projectId, fileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProjectFileProjectsProjectIdFilesFileIdPut(ctx context.Context, projectId string, fileId string, body UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequest(c.Server, projectId, fileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadHistoryProjectsProjectIdHistoryGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadHistoryProjectsProjectIdHistoryGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptPromptPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptPromptPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptPromptPost(ctx context.Context, body PromptPromptPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptPromptPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProtectedRouteProtectedRouteGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProtectedRouteProtectedRouteGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSettingsGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSettingsGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSettingsPutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingsPutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSettingsPut(ctx context.Context, body UpdateSettingsPutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSettingsPutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTasksGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTasksGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReadProjectTasksEpTasksProjectIdGet(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReadProjectTasksEpTasksProjectIdGetRequest(c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageTotalGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageTotalGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewReadRootGetRequest generates requests for ReadRootGet
func NewReadRootGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAgentsGetRequest generates requests for ListAgentsGet
func NewListAgentsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentsIdGetRequest generates requests for GetAgentsIdGet
func NewGetAgentsIdGetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListJobsGetRequest generates requests for ListJobsGet
func NewListJobsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadJobsJobIdGetRequest generates requests for ReadJobsJobIdGet
func NewReadJobsJobIdGetRequest(server string, jobId interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadProjectsJobsJobIdProjectsGetRequest generates requests for ReadProjectsJobsJobIdProjectsGet
func NewReadProjectsJobsJobIdProjectsGetRequest(server string, jobId interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "job_id", runtime.ParamLocationPath, jobId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jobs/%s/projects", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListProjectsGetRequest generates requests for ListProjectsGet
func NewListProjectsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectsPostRequest calls the generic CreateProjectsPost builder with application/json body
func NewCreateProjectsPostRequest(server string, body CreateProjectsPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectsPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectsPostRequestWithBody generates requests for CreateProjectsPost with any type of body
func NewCreateProjectsPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectsProjectIdDeleteRequest generates requests for DeleteProjectsProjectIdDelete
func NewDeleteProjectsProjectIdDeleteRequest(server string, projectId interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadProjectsProjectIdGetRequest generates requests for ReadProjectsProjectIdGet
func NewReadProjectsProjectIdGetRequest(server string, projectId interface{}) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProjectsProjectIdPutRequest calls the generic UpdateProjectsProjectIdPut builder with application/json body
func NewUpdateProjectsProjectIdPutRequest(server string, projectId string, body UpdateProjectsProjectIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectsProjectIdPutRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewUpdateProjectsProjectIdPutRequestWithBody generates requests for UpdateProjectsProjectIdPut with any type of body
func NewUpdateProjectsProjectIdPutRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRunEditCommandProjectsProjectIdCodePostRequest calls the generic RunEditCommandProjectsProjectIdCodePost builder with application/json body
func NewRunEditCommandProjectsProjectIdCodePostRequest(server string, projectId string, body RunEditCommandProjectsProjectIdCodePostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRunEditCommandProjectsProjectIdCodePostRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewRunEditCommandProjectsProjectIdCodePostRequestWithBody generates requests for RunEditCommandProjectsProjectIdCodePost with any type of body
func NewRunEditCommandProjectsProjectIdCodePostRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/code", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateProjectFileProjectsProjectIdFilesPostRequest calls the generic CreateProjectFileProjectsProjectIdFilesPost builder with application/json body
func NewCreateProjectFileProjectsProjectIdFilesPostRequest(server string, projectId string, body CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectFileProjectsProjectIdFilesPostRequestWithBody(server, projectId, "application/json", bodyReader)
}

// NewCreateProjectFileProjectsProjectIdFilesPostRequestWithBody generates requests for CreateProjectFileProjectsProjectIdFilesPost with any type of body
func NewCreateProjectFileProjectsProjectIdFilesPostRequestWithBody(server string, projectId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/files", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequest calls the generic UpdateProjectFileProjectsProjectIdFilesFileIdPut builder with application/json body
func NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequest(server string, projectId string, fileId string, body UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequestWithBody(server, projectId, fileId, "application/json", bodyReader)
}

// NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequestWithBody generates requests for UpdateProjectFileProjectsProjectIdFilesFileIdPut with any type of body
func NewUpdateProjectFileProjectsProjectIdFilesFileIdPutRequestWithBody(server string, projectId string, fileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "file_id", runtime.ParamLocationPath, fileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/files/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReadHistoryProjectsProjectIdHistoryGetRequest generates requests for ReadHistoryProjectsProjectIdHistoryGet
func NewReadHistoryProjectsProjectIdHistoryGetRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/history", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPromptPromptPostRequest calls the generic PromptPromptPost builder with application/json body
func NewPromptPromptPostRequest(server string, body PromptPromptPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPromptPromptPostRequestWithBody(server, "application/json", bodyReader)
}

// NewPromptPromptPostRequestWithBody generates requests for PromptPromptPost with any type of body
func NewPromptPromptPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/prompt/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewProtectedRouteProtectedRouteGetRequest generates requests for ProtectedRouteProtectedRouteGet
func NewProtectedRouteProtectedRouteGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/protected-route")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSettingsGetRequest generates requests for ListSettingsGet
func NewListSettingsGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSettingsPutRequest calls the generic UpdateSettingsPut builder with application/json body
func NewUpdateSettingsPutRequest(server string, body UpdateSettingsPutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSettingsPutRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSettingsPutRequestWithBody generates requests for UpdateSettingsPut with any type of body
func NewUpdateSettingsPutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/settings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTasksGetRequest generates requests for ListTasksGet
func NewListTasksGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReadProjectTasksEpTasksProjectIdGetRequest generates requests for ReadProjectTasksEpTasksProjectIdGet
func NewReadProjectTasksEpTasksProjectIdGetRequest(server string, projectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project_id", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tasks/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageTotalGetRequest generates requests for ListUsageTotalGet
func NewListUsageTotalGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usage/total")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ReadRootGetWithResponse request
	ReadRootGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadRootGetResponse, error)

	// ListAgentsGetWithResponse request
	ListAgentsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsGetResponse, error)

	// GetAgentsIdGetWithResponse request
	GetAgentsIdGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdGetResponse, error)

	// ListJobsGetWithResponse request
	ListJobsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJobsGetResponse, error)

	// ReadJobsJobIdGetWithResponse request
	ReadJobsJobIdGetWithResponse(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*ReadJobsJobIdGetResponse, error)

	// ReadProjectsJobsJobIdProjectsGetWithResponse request
	ReadProjectsJobsJobIdProjectsGetWithResponse(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*ReadProjectsJobsJobIdProjectsGetResponse, error)

	// ListProjectsGetWithResponse request
	ListProjectsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsGetResponse, error)

	// CreateProjectsPostWithBodyWithResponse request with any body
	CreateProjectsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectsPostResponse, error)

	CreateProjectsPostWithResponse(ctx context.Context, body CreateProjectsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectsPostResponse, error)

	// DeleteProjectsProjectIdDeleteWithResponse request
	DeleteProjectsProjectIdDeleteWithResponse(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdDeleteResponse, error)

	// ReadProjectsProjectIdGetWithResponse request
	ReadProjectsProjectIdGetWithResponse(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*ReadProjectsProjectIdGetResponse, error)

	// UpdateProjectsProjectIdPutWithBodyWithResponse request with any body
	UpdateProjectsProjectIdPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectsProjectIdPutResponse, error)

	UpdateProjectsProjectIdPutWithResponse(ctx context.Context, projectId string, body UpdateProjectsProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectsProjectIdPutResponse, error)

	// RunEditCommandProjectsProjectIdCodePostWithBodyWithResponse request with any body
	RunEditCommandProjectsProjectIdCodePostWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunEditCommandProjectsProjectIdCodePostResponse, error)

	RunEditCommandProjectsProjectIdCodePostWithResponse(ctx context.Context, projectId string, body RunEditCommandProjectsProjectIdCodePostJSONRequestBody, reqEditors ...RequestEditorFn) (*RunEditCommandProjectsProjectIdCodePostResponse, error)

	// CreateProjectFileProjectsProjectIdFilesPostWithBodyWithResponse request with any body
	CreateProjectFileProjectsProjectIdFilesPostWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectFileProjectsProjectIdFilesPostResponse, error)

	CreateProjectFileProjectsProjectIdFilesPostWithResponse(ctx context.Context, projectId string, body CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectFileProjectsProjectIdFilesPostResponse, error)

	// UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBodyWithResponse request with any body
	UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBodyWithResponse(ctx context.Context, projectId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse, error)

	UpdateProjectFileProjectsProjectIdFilesFileIdPutWithResponse(ctx context.Context, projectId string, fileId string, body UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse, error)

	// ReadHistoryProjectsProjectIdHistoryGetWithResponse request
	ReadHistoryProjectsProjectIdHistoryGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ReadHistoryProjectsProjectIdHistoryGetResponse, error)

	// PromptPromptPostWithBodyWithResponse request with any body
	PromptPromptPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptPromptPostResponse, error)

	PromptPromptPostWithResponse(ctx context.Context, body PromptPromptPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptPromptPostResponse, error)

	// ProtectedRouteProtectedRouteGetWithResponse request
	ProtectedRouteProtectedRouteGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProtectedRouteProtectedRouteGetResponse, error)

	// ListSettingsGetWithResponse request
	ListSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSettingsGetResponse, error)

	// UpdateSettingsPutWithBodyWithResponse request with any body
	UpdateSettingsPutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingsPutResponse, error)

	UpdateSettingsPutWithResponse(ctx context.Context, body UpdateSettingsPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingsPutResponse, error)

	// ListTasksGetWithResponse request
	ListTasksGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTasksGetResponse, error)

	// ReadProjectTasksEpTasksProjectIdGetWithResponse request
	ReadProjectTasksEpTasksProjectIdGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ReadProjectTasksEpTasksProjectIdGetResponse, error)

	// ListUsageTotalGetWithResponse request
	ListUsageTotalGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUsageTotalGetResponse, error)
}

type ReadRootGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ReadRootGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadRootGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAgentsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListAgentsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAgentsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetAgentsIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListJobsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadJobsJobIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadJobsJobIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadJobsJobIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadProjectsJobsJobIdProjectsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadProjectsJobsJobIdProjectsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadProjectsJobsJobIdProjectsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListProjectsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListProjectsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListProjectsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectsPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateProjectsPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectsPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectsProjectIdDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r DeleteProjectsProjectIdDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectsProjectIdDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadProjectsProjectIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadProjectsProjectIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadProjectsProjectIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectsProjectIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateProjectsProjectIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectsProjectIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunEditCommandProjectsProjectIdCodePostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r RunEditCommandProjectsProjectIdCodePostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunEditCommandProjectsProjectIdCodePostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectFileProjectsProjectIdFilesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateProjectFileProjectsProjectIdFilesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectFileProjectsProjectIdFilesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadHistoryProjectsProjectIdHistoryGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadHistoryProjectsProjectIdHistoryGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadHistoryProjectsProjectIdHistoryGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptPromptPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r PromptPromptPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptPromptPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProtectedRouteProtectedRouteGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ProtectedRouteProtectedRouteGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProtectedRouteProtectedRouteGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSettingsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListSettingsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSettingsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSettingsPutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r UpdateSettingsPutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSettingsPutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTasksGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListTasksGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTasksGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReadProjectTasksEpTasksProjectIdGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r ReadProjectTasksEpTasksProjectIdGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReadProjectTasksEpTasksProjectIdGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageTotalGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r ListUsageTotalGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageTotalGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ReadRootGetWithResponse request returning *ReadRootGetResponse
func (c *ClientWithResponses) ReadRootGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReadRootGetResponse, error) {
	rsp, err := c.ReadRootGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadRootGetResponse(rsp)
}

// ListAgentsGetWithResponse request returning *ListAgentsGetResponse
func (c *ClientWithResponses) ListAgentsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListAgentsGetResponse, error) {
	rsp, err := c.ListAgentsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAgentsGetResponse(rsp)
}

// GetAgentsIdGetWithResponse request returning *GetAgentsIdGetResponse
func (c *ClientWithResponses) GetAgentsIdGetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetAgentsIdGetResponse, error) {
	rsp, err := c.GetAgentsIdGet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsIdGetResponse(rsp)
}

// ListJobsGetWithResponse request returning *ListJobsGetResponse
func (c *ClientWithResponses) ListJobsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListJobsGetResponse, error) {
	rsp, err := c.ListJobsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsGetResponse(rsp)
}

// ReadJobsJobIdGetWithResponse request returning *ReadJobsJobIdGetResponse
func (c *ClientWithResponses) ReadJobsJobIdGetWithResponse(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*ReadJobsJobIdGetResponse, error) {
	rsp, err := c.ReadJobsJobIdGet(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadJobsJobIdGetResponse(rsp)
}

// ReadProjectsJobsJobIdProjectsGetWithResponse request returning *ReadProjectsJobsJobIdProjectsGetResponse
func (c *ClientWithResponses) ReadProjectsJobsJobIdProjectsGetWithResponse(ctx context.Context, jobId interface{}, reqEditors ...RequestEditorFn) (*ReadProjectsJobsJobIdProjectsGetResponse, error) {
	rsp, err := c.ReadProjectsJobsJobIdProjectsGet(ctx, jobId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadProjectsJobsJobIdProjectsGetResponse(rsp)
}

// ListProjectsGetWithResponse request returning *ListProjectsGetResponse
func (c *ClientWithResponses) ListProjectsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListProjectsGetResponse, error) {
	rsp, err := c.ListProjectsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListProjectsGetResponse(rsp)
}

// CreateProjectsPostWithBodyWithResponse request with arbitrary body returning *CreateProjectsPostResponse
func (c *ClientWithResponses) CreateProjectsPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectsPostResponse, error) {
	rsp, err := c.CreateProjectsPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectsPostResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectsPostWithResponse(ctx context.Context, body CreateProjectsPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectsPostResponse, error) {
	rsp, err := c.CreateProjectsPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectsPostResponse(rsp)
}

// DeleteProjectsProjectIdDeleteWithResponse request returning *DeleteProjectsProjectIdDeleteResponse
func (c *ClientWithResponses) DeleteProjectsProjectIdDeleteWithResponse(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*DeleteProjectsProjectIdDeleteResponse, error) {
	rsp, err := c.DeleteProjectsProjectIdDelete(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectsProjectIdDeleteResponse(rsp)
}

// ReadProjectsProjectIdGetWithResponse request returning *ReadProjectsProjectIdGetResponse
func (c *ClientWithResponses) ReadProjectsProjectIdGetWithResponse(ctx context.Context, projectId interface{}, reqEditors ...RequestEditorFn) (*ReadProjectsProjectIdGetResponse, error) {
	rsp, err := c.ReadProjectsProjectIdGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadProjectsProjectIdGetResponse(rsp)
}

// UpdateProjectsProjectIdPutWithBodyWithResponse request with arbitrary body returning *UpdateProjectsProjectIdPutResponse
func (c *ClientWithResponses) UpdateProjectsProjectIdPutWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectsProjectIdPutResponse, error) {
	rsp, err := c.UpdateProjectsProjectIdPutWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectsProjectIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectsProjectIdPutWithResponse(ctx context.Context, projectId string, body UpdateProjectsProjectIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectsProjectIdPutResponse, error) {
	rsp, err := c.UpdateProjectsProjectIdPut(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectsProjectIdPutResponse(rsp)
}

// RunEditCommandProjectsProjectIdCodePostWithBodyWithResponse request with arbitrary body returning *RunEditCommandProjectsProjectIdCodePostResponse
func (c *ClientWithResponses) RunEditCommandProjectsProjectIdCodePostWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RunEditCommandProjectsProjectIdCodePostResponse, error) {
	rsp, err := c.RunEditCommandProjectsProjectIdCodePostWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunEditCommandProjectsProjectIdCodePostResponse(rsp)
}

func (c *ClientWithResponses) RunEditCommandProjectsProjectIdCodePostWithResponse(ctx context.Context, projectId string, body RunEditCommandProjectsProjectIdCodePostJSONRequestBody, reqEditors ...RequestEditorFn) (*RunEditCommandProjectsProjectIdCodePostResponse, error) {
	rsp, err := c.RunEditCommandProjectsProjectIdCodePost(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunEditCommandProjectsProjectIdCodePostResponse(rsp)
}

// CreateProjectFileProjectsProjectIdFilesPostWithBodyWithResponse request with arbitrary body returning *CreateProjectFileProjectsProjectIdFilesPostResponse
func (c *ClientWithResponses) CreateProjectFileProjectsProjectIdFilesPostWithBodyWithResponse(ctx context.Context, projectId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectFileProjectsProjectIdFilesPostResponse, error) {
	rsp, err := c.CreateProjectFileProjectsProjectIdFilesPostWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectFileProjectsProjectIdFilesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectFileProjectsProjectIdFilesPostWithResponse(ctx context.Context, projectId string, body CreateProjectFileProjectsProjectIdFilesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectFileProjectsProjectIdFilesPostResponse, error) {
	rsp, err := c.CreateProjectFileProjectsProjectIdFilesPost(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectFileProjectsProjectIdFilesPostResponse(rsp)
}

// UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBodyWithResponse request with arbitrary body returning *UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse
func (c *ClientWithResponses) UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBodyWithResponse(ctx context.Context, projectId string, fileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse, error) {
	rsp, err := c.UpdateProjectFileProjectsProjectIdFilesFileIdPutWithBody(ctx, projectId, fileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectFileProjectsProjectIdFilesFileIdPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateProjectFileProjectsProjectIdFilesFileIdPutWithResponse(ctx context.Context, projectId string, fileId string, body UpdateProjectFileProjectsProjectIdFilesFileIdPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse, error) {
	rsp, err := c.UpdateProjectFileProjectsProjectIdFilesFileIdPut(ctx, projectId, fileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProjectFileProjectsProjectIdFilesFileIdPutResponse(rsp)
}

// ReadHistoryProjectsProjectIdHistoryGetWithResponse request returning *ReadHistoryProjectsProjectIdHistoryGetResponse
func (c *ClientWithResponses) ReadHistoryProjectsProjectIdHistoryGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ReadHistoryProjectsProjectIdHistoryGetResponse, error) {
	rsp, err := c.ReadHistoryProjectsProjectIdHistoryGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadHistoryProjectsProjectIdHistoryGetResponse(rsp)
}

// PromptPromptPostWithBodyWithResponse request with arbitrary body returning *PromptPromptPostResponse
func (c *ClientWithResponses) PromptPromptPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptPromptPostResponse, error) {
	rsp, err := c.PromptPromptPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptPromptPostResponse(rsp)
}

func (c *ClientWithResponses) PromptPromptPostWithResponse(ctx context.Context, body PromptPromptPostJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptPromptPostResponse, error) {
	rsp, err := c.PromptPromptPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptPromptPostResponse(rsp)
}

// ProtectedRouteProtectedRouteGetWithResponse request returning *ProtectedRouteProtectedRouteGetResponse
func (c *ClientWithResponses) ProtectedRouteProtectedRouteGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProtectedRouteProtectedRouteGetResponse, error) {
	rsp, err := c.ProtectedRouteProtectedRouteGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProtectedRouteProtectedRouteGetResponse(rsp)
}

// ListSettingsGetWithResponse request returning *ListSettingsGetResponse
func (c *ClientWithResponses) ListSettingsGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSettingsGetResponse, error) {
	rsp, err := c.ListSettingsGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSettingsGetResponse(rsp)
}

// UpdateSettingsPutWithBodyWithResponse request with arbitrary body returning *UpdateSettingsPutResponse
func (c *ClientWithResponses) UpdateSettingsPutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSettingsPutResponse, error) {
	rsp, err := c.UpdateSettingsPutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingsPutResponse(rsp)
}

func (c *ClientWithResponses) UpdateSettingsPutWithResponse(ctx context.Context, body UpdateSettingsPutJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSettingsPutResponse, error) {
	rsp, err := c.UpdateSettingsPut(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSettingsPutResponse(rsp)
}

// ListTasksGetWithResponse request returning *ListTasksGetResponse
func (c *ClientWithResponses) ListTasksGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListTasksGetResponse, error) {
	rsp, err := c.ListTasksGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTasksGetResponse(rsp)
}

// ReadProjectTasksEpTasksProjectIdGetWithResponse request returning *ReadProjectTasksEpTasksProjectIdGetResponse
func (c *ClientWithResponses) ReadProjectTasksEpTasksProjectIdGetWithResponse(ctx context.Context, projectId string, reqEditors ...RequestEditorFn) (*ReadProjectTasksEpTasksProjectIdGetResponse, error) {
	rsp, err := c.ReadProjectTasksEpTasksProjectIdGet(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReadProjectTasksEpTasksProjectIdGetResponse(rsp)
}

// ListUsageTotalGetWithResponse request returning *ListUsageTotalGetResponse
func (c *ClientWithResponses) ListUsageTotalGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListUsageTotalGetResponse, error) {
	rsp, err := c.ListUsageTotalGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageTotalGetResponse(rsp)
}

// ParseReadRootGetResponse parses an HTTP response from a ReadRootGetWithResponse call
func ParseReadRootGetResponse(rsp *http.Response) (*ReadRootGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadRootGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAgentsGetResponse parses an HTTP response from a ListAgentsGetWithResponse call
func ParseListAgentsGetResponse(rsp *http.Response) (*ListAgentsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAgentsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAgentsIdGetResponse parses an HTTP response from a GetAgentsIdGetWithResponse call
func ParseGetAgentsIdGetResponse(rsp *http.Response) (*GetAgentsIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListJobsGetResponse parses an HTTP response from a ListJobsGetWithResponse call
func ParseListJobsGetResponse(rsp *http.Response) (*ListJobsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadJobsJobIdGetResponse parses an HTTP response from a ReadJobsJobIdGetWithResponse call
func ParseReadJobsJobIdGetResponse(rsp *http.Response) (*ReadJobsJobIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadJobsJobIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseReadProjectsJobsJobIdProjectsGetResponse parses an HTTP response from a ReadProjectsJobsJobIdProjectsGetWithResponse call
func ParseReadProjectsJobsJobIdProjectsGetResponse(rsp *http.Response) (*ReadProjectsJobsJobIdProjectsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadProjectsJobsJobIdProjectsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListProjectsGetResponse parses an HTTP response from a ListProjectsGetWithResponse call
func ParseListProjectsGetResponse(rsp *http.Response) (*ListProjectsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListProjectsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProjectsPostResponse parses an HTTP response from a CreateProjectsPostWithResponse call
func ParseCreateProjectsPostResponse(rsp *http.Response) (*CreateProjectsPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectsPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteProjectsProjectIdDeleteResponse parses an HTTP response from a DeleteProjectsProjectIdDeleteWithResponse call
func ParseDeleteProjectsProjectIdDeleteResponse(rsp *http.Response) (*DeleteProjectsProjectIdDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectsProjectIdDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseReadProjectsProjectIdGetResponse parses an HTTP response from a ReadProjectsProjectIdGetWithResponse call
func ParseReadProjectsProjectIdGetResponse(rsp *http.Response) (*ReadProjectsProjectIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadProjectsProjectIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateProjectsProjectIdPutResponse parses an HTTP response from a UpdateProjectsProjectIdPutWithResponse call
func ParseUpdateProjectsProjectIdPutResponse(rsp *http.Response) (*UpdateProjectsProjectIdPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectsProjectIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseRunEditCommandProjectsProjectIdCodePostResponse parses an HTTP response from a RunEditCommandProjectsProjectIdCodePostWithResponse call
func ParseRunEditCommandProjectsProjectIdCodePostResponse(rsp *http.Response) (*RunEditCommandProjectsProjectIdCodePostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunEditCommandProjectsProjectIdCodePostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateProjectFileProjectsProjectIdFilesPostResponse parses an HTTP response from a CreateProjectFileProjectsProjectIdFilesPostWithResponse call
func ParseCreateProjectFileProjectsProjectIdFilesPostResponse(rsp *http.Response) (*CreateProjectFileProjectsProjectIdFilesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectFileProjectsProjectIdFilesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateProjectFileProjectsProjectIdFilesFileIdPutResponse parses an HTTP response from a UpdateProjectFileProjectsProjectIdFilesFileIdPutWithResponse call
func ParseUpdateProjectFileProjectsProjectIdFilesFileIdPutResponse(rsp *http.Response) (*UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProjectFileProjectsProjectIdFilesFileIdPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseReadHistoryProjectsProjectIdHistoryGetResponse parses an HTTP response from a ReadHistoryProjectsProjectIdHistoryGetWithResponse call
func ParseReadHistoryProjectsProjectIdHistoryGetResponse(rsp *http.Response) (*ReadHistoryProjectsProjectIdHistoryGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadHistoryProjectsProjectIdHistoryGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParsePromptPromptPostResponse parses an HTTP response from a PromptPromptPostWithResponse call
func ParsePromptPromptPostResponse(rsp *http.Response) (*PromptPromptPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptPromptPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseProtectedRouteProtectedRouteGetResponse parses an HTTP response from a ProtectedRouteProtectedRouteGetWithResponse call
func ParseProtectedRouteProtectedRouteGetResponse(rsp *http.Response) (*ProtectedRouteProtectedRouteGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProtectedRouteProtectedRouteGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSettingsGetResponse parses an HTTP response from a ListSettingsGetWithResponse call
func ParseListSettingsGetResponse(rsp *http.Response) (*ListSettingsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSettingsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSettingsPutResponse parses an HTTP response from a UpdateSettingsPutWithResponse call
func ParseUpdateSettingsPutResponse(rsp *http.Response) (*UpdateSettingsPutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSettingsPutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListTasksGetResponse parses an HTTP response from a ListTasksGetWithResponse call
func ParseListTasksGetResponse(rsp *http.Response) (*ListTasksGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTasksGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReadProjectTasksEpTasksProjectIdGetResponse parses an HTTP response from a ReadProjectTasksEpTasksProjectIdGetWithResponse call
func ParseReadProjectTasksEpTasksProjectIdGetResponse(rsp *http.Response) (*ReadProjectTasksEpTasksProjectIdGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReadProjectTasksEpTasksProjectIdGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListUsageTotalGetResponse parses an HTTP response from a ListUsageTotalGetWithResponse call
func ParseListUsageTotalGetResponse(rsp *http.Response) (*ListUsageTotalGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageTotalGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
